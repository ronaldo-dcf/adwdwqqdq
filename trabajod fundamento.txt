#include <iostream>
using namespace std;

class Nodo {
    int dato;
    Nodo* hijoDerecho;
    Nodo* hijoIzquierdo;
public:
    //Constructor - inicializar los atributos
    Nodo(int dato)
    {
        this->dato = dato;
        hijoDerecho = NULL;//por que no apuntamos a ningun nodo
        hijoIzquierdo = NULL;//por que no apuntamos a ningun nodo
    }
    //getter and setter
    int getDato()
    {
        return dato;
    }
    void setDato(int dato)
    {
        this->dato = dato;
    }
    Nodo* getHijoIzquierdo()
    {
        return this->hijoIzquierdo;
    }
    void setHijoIzquierdo(Nodo* enlace)
    {
        this->hijoIzquierdo = enlace;
    }
    Nodo* getHijoDerecho()
    {
        return this->hijoDerecho;
    }
    void setHijoDerecho(Nodo* enlace)
    {
        this->hijoDerecho = enlace;
    }

    void imprimir()
    {
        cout << "/-------------------\\" << endl;
        cout << "|Dato: " << dato << endl;
        cout << "|-------------------" << endl;
        cout << "|Izquierdo: " << hijoIzquierdo << "\tDerecho: " << hijoDerecho << endl;
        cout << "\\------------------/" << endl;
    }
};
class ArbolBinario {
    Nodo* raiz;
public:
    ArbolBinario() {
        raiz = NULL;
    }
    bool EstaVacia()
    {
        if (raiz == NULL)
            return true;
        else
            return false;
    }
    void Insertar(Nodo* inicial, int dato) {
       /* if(raiz == NULL){
            Nodo* temp = new Nodo(dato);
            temp->getDato() = dato;
            temp->getHijoIzquierdo()= NULL;
            temp->getHijoDerecho() = NULL;
            raiz= temp;

        }*/
        //aqui vamos a implementar este codigo
        Nodo* temp = new Nodo(dato);
        if(EstaVacia())
        {
            //raiz = temp;
            inicial=temp;
        }
        else{

                /*if(raiz->getDato() < dato)
                {
                   raiz->setHijoIzquierdo(raiz);
                }
                else
                {
                   raiz->setHijoDerecho(raiz);
                }
                */

                /*int valorRaiz = raiz->getDato();
                if(dato < valorRaiz)
                {
                    Insertar(dato);
                    raiz->getHijoIzquierdo();
                }
                else{
                    Insertar(dato);
                    raiz->getHijoIzquierdo();
                }*/
                if(dato < inicial->getDato())
                {
                    if(inicial->getHijoIzquierdo()==NULL)
                        inicial->setHijoIzquierdo(temp);
                    else
                        Insertar(inicial->getHijoIzquierdo(),dato);
                }

                else {
                    if(inicial->getHijoDerecho()==NULL)
                    inicial->setHijoDerecho(temp);
                    else
                        Insertar(inicial->getHijoDerecho(),dato);
                }
        }
    }
    void Mostrar(Nodo* inicial, int contador)
    {
        Nodo* temp = new Nodo(contador);
        if(EstaVacia())
        {
            //raiz = temp;
            inicial=temp;
        }
        else
        {
        Mostrar(inicial->getHijoDerecho(),contador+1);
        for(int i=0;i<contador;i++)
        {
            cout<<"   ";
        }
        cout<<inicial->getDato()<<endl;
        Mostrar(inicial->getHijoIzquierdo(),contador+1);
        cout<< "hola mundo";
        }
    }
  void preorden(Nodo* inicial)
  {
      if(inicial)
      {

        cout<<inicial->getDato() << " ";
        preorden(inicial->getHijoDerecho());
        preorden(inicial->getHijoIzquierdo());

      }
  }
void inorden(Nodo* inicial)
{

    if(inicial)
    {
        inorden(inicial->getHijoIzquierdo());
        cout<<inicial->getDato() << " ";
        inorden(inicial->getHijoIzquierdo());
    }
}

void  posorden(Nodo* inicial)
{
    if(inicial)
    {
        posorden(inicial->getHijoIzquierdo());
        posorden(inicial->getHijoDerecho());
        cout<< inicial ->getDato() << " " ;
    }
}
void mostrardato(Nodo* inicial)
{
if(inicial)
{
    if(inicial->getHijoIzquierdo())
    {
        cout<<inicial->getHijoIzquierdo()->getDato();
        mostrardato(inicial->getHijoIzquierdo());
    }
    mostrardato(inicial->getHijoDerecho());
}
}
};




void menu(){
    ArbolBinario arbol = ArbolBinario();
    Nodo* ap;
int dato, opcion, contador=0;
do{
    cout<<"\t.: MENU: ."<<endl;
    cout<<"1. Insertar un nuevo nodo"<<endl;
    cout<<"2. Mostrar el arbol completo"<<endl;
    cout<<"3. Mostrar el arbol Preorder"<<endl;
    cout<<"4. Mostrar el arbol Inorder"<<endl;
    cout<<"5. Mostar el arbol PostOrder"<<endl;
    cout<<"6. Salir "<<endl;
    cout<<"Opcion: ";
    cin>>opcion;
    switch(opcion){
case 1:
    cout<<"\nDigite un numero: "; cin>>dato;
    arbol.Insertar(ap, dato);
    cout<<"\n";
    system("pause");
    break;
case 2:
    cout<<"\nMostrando el arbol completo:\n\n";
    arbol.preorden(ap);
    cout<<"\n";
    system("pause");
    break;
        }
        system("cls");
}while(opcion != 3);
}


int main()
{
   /*Nodo nodo = Nodo();
    nodo.imprimir();
    Nodo* nodo2 = new Nodo(15);
    nodo2->imprimir();
    nodo.setHijoDerecho(nodo2);
    Nodo* nodo3 = new Nodo(10);
    nodo3->imprimir();
    nodo.setHijoIzquierdo(nodo3);
    nodo.imprimir();*/

menu();
return 0;
}
